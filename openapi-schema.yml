openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
  /employee/{user}:
    get:
      operationId: retrieveEmployee
      description: View Detail on Employee, Update, Delete
      parameters:
      - name: user
        in: path
        required: true
        description: A unique value identifying this employee.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
          description: ''
      tags:
      - employee
    put:
      operationId: updateEmployee
      description: View Detail on Employee, Update, Delete
      parameters:
      - name: user
        in: path
        required: true
        description: A unique value identifying this employee.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employees'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employees'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employees'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
          description: ''
      tags:
      - employee
    patch:
      operationId: partialUpdateEmployee
      description: View Detail on Employee, Update, Delete
      parameters:
      - name: user
        in: path
        required: true
        description: A unique value identifying this employee.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employees'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employees'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employees'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
          description: ''
      tags:
      - employee
    delete:
      operationId: destroyEmployee
      description: View Detail on Employee, Update, Delete
      parameters:
      - name: user
        in: path
        required: true
        description: A unique value identifying this employee.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - employee
  /employee/:
    get:
      operationId: listEmployees
      description: Create and List element of all Employees
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employees'
          description: ''
      tags:
      - employee
    post:
      operationId: createEmployee
      description: Create and List element of all Employees
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employees'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employees'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employees'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
          description: ''
      tags:
      - employee
  /department/:
    get:
      operationId: listDepartments
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Departments'
          description: ''
      tags:
      - department
  /role/:
    get:
      operationId: listRolets
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roles'
          description: ''
      tags:
      - role
    post:
      operationId: createRolet
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roles'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Roles'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Roles'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roles'
          description: ''
      tags:
      - role
  /role/roleuser/:
    get:
      operationId: listUserRoles
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserRole'
          description: ''
      tags:
      - role
    post:
      operationId: createUserRole
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRole'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRole'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRole'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: ''
      tags:
      - role
  /leje/{id}:
    get:
      operationId: retrieveLeje
      description: ''
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this leje.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lejes'
          description: ''
      tags:
      - leje
  /leje/:
    get:
      operationId: listLejeSerializers
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lejes'
          description: ''
      tags:
      - leje
  /leje/status:
    get:
      operationId: listPranimRefuzimSerializers
      description: ''
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PranimRefuzims'
          description: ''
      tags:
      - leje
  /rest-auth/logout/:
    get:
      operationId: listLogouts
      description: 'Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items: {}
          description: ''
      tags:
      - rest-auth
    post:
      operationId: createLogout
      description: 'Calls Django logout method and delete the Token object

        assigned to the current User object.


        Accepts/Returns nothing.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - rest-auth
  /rest-auth/user/:
    get:
      operationId: retrieveUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - rest-auth
    put:
      operationId: updateUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - rest-auth
    patch:
      operationId: partialUpdateUserDetails
      description: 'Reads and updates UserModel fields

        Accepts GET, PUT, PATCH methods.


        Default accepted fields: username, first_name, last_name

        Default display fields: pk, username, email, first_name, last_name

        Read-only fields: pk, email


        Returns UserModel fields.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
      tags:
      - rest-auth
  /employee/add/:
    post:
      operationId: createEmployee
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employees'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Employees'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Employees'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employees'
          description: ''
      tags:
      - employee
  /leje/create/:
    post:
      operationId: createLejeSerializers
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lejes'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Lejes'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Lejes'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lejes'
          description: ''
      tags:
      - leje
  /leje/pranim:
    post:
      operationId: createPranimRefuzimSerializers
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PranimRefuzims'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PranimRefuzims'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PranimRefuzims'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PranimRefuzims'
          description: ''
      tags:
      - leje
  /rest-auth/password/reset/:
    post:
      operationId: createPasswordReset
      description: 'Calls Django Auth PasswordResetForm save method.


        Accepts the following POST parameters: email

        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
          description: ''
      tags:
      - rest-auth
  /rest-auth/password/reset/confirm/:
    post:
      operationId: createPasswordResetConfirm
      description: "Password reset e-mail link is confirmed, therefore\nthis resets\
        \ the user's password.\n\nAccepts the following POST parameters: token, uid,\n\
        \    new_password1, new_password2\nReturns the success/fail message."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
      tags:
      - rest-auth
  /rest-auth/login/:
    post:
      operationId: createLogin
      description: 'Check the credentials and return the REST Token

        if the credentials are valid and authenticated.

        Calls Django Auth login method to register User ID

        in Django session framework


        Accept the following POST parameters: username, password

        Return the REST Framework Token Object''s key.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
      tags:
      - rest-auth
  /rest-auth/password/change/:
    post:
      operationId: createPasswordChange
      description: 'Calls Django Auth SetPasswordForm save method.


        Accepts the following POST parameters: new_password1, new_password2

        Returns the success/fail message.'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
          description: ''
      tags:
      - rest-auth
  /rest-auth/registration/:
    post:
      operationId: createRegister
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
      tags:
      - rest-auth
  /rest-auth/registration/verify-email/:
    post:
      operationId: createVerifyEmail
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
          description: ''
      tags:
      - rest-auth
components:
  schemas:
    Employees:
      type: object
      properties:
        user_id:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 50
        user:
          type: integer
        department:
          type: integer
        annual_days:
          type: number
      required:
      - name
      - user
      - department
    Departments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        parent_department:
          type: integer
          nullable: true
        name:
          type: string
          maxLength: 50
      required:
      - name
    Roles:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - name
    UserRole:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        roli:
          type: integer
        user_id:
          type: integer
      required:
      - name
      - roli
      - user_id
    Lejes:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        employee_id:
          type: object
          properties:
            user:
              type: integer
            name:
              type: string
              maxLength: 50
            annual_days:
              type: number
            department:
              type: integer
          required:
          - user
          - name
          - department
          readOnly: true
        fillim_leje:
          type: string
          format: date-time
        fund_leje:
          type: string
          format: date-time
      required:
      - name
      - fillim_leje
      - fund_leje
    PranimRefuzims:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
        koment:
          type: string
        status:
          type: boolean
          default: false
        leje:
          type: integer
        manager:
          type: integer
      required:
      - name
      - koment
      - leje
      - manager
    UserDetails:
      type: object
      properties:
        pk:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - username
    PasswordReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - uid
      - token
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - username
      - password1
      - password2
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
      required:
      - key
